name: vere

on:
  workflow_call:
    inputs:
      upload:
        description: 'upload binaries to gcp'
        type: boolean
        default: false
        required: false
      pace:
        description: 'release pace'
        type: string
        default: 'edge'
        required: false
    secrets:
      GCP_CREDENTIALS:
        required: false
      GCS_SERVICE_ACCOUNT_KEY:
        required: false
      GCS_PROJECT:
        required: false

  workflow_dispatch:
    inputs:
      upload:
        description: 'upload binaries to gcp'
        type: boolean
        default: false
        required: false
      pace:
        description: 'release pace'
        type: choice
        options:
        - edge
        - soon
        - live

env:
  UPLOAD_BASE: bootstrap.urbit.org/vere
  VERE_PACE: ${{ inputs.pace }}
  VERSION_TYPE: ${{ (inputs.pace == 'soon' || inputs.pace == 'live') && 'real' || 'hash' }}

jobs:
  urbit:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { target: linux-x86_64, runner: ubuntu-22.04 }
          - { target: linux-arm64, runner: ubuntu-22.04 }
          - { target: macos-x86_64, runner: macos-12 }

    runs-on: ${{ matrix.runner }}

    steps:
      - uses: actions/checkout@v3

      - name: setup cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/bazel
          key: ${{ matrix.target }}-bazel-cache

      - name: setup aarch64-linux-musl-gcc cache
        uses: actions/cache@v3
        if: matrix.target == 'linux-arm64'
        with:
          path: |
            /usr/local/aarch64-linux-musl
          key: aarch64-linux-musl-gcc

      - name: setup x86_64-linux-musl-gcc cache
        uses: actions/cache@v3
        if: matrix.target == 'linux-x86_64'
        with:
          path: |
            /usr/local/x86_64-linux-musl
          key: x86_64-linux-musl-gcc

      - name: build static binary
        # NOTE: On GitHub's macOS hosted runners, Bazel fails to find our GMP
        # header file because it tries to find a system-installed GMP at
        # `/usr/local/include/gmp.h` instead of our project-local copy specified
        # in `bazel/third_party/gmp/gmp.BUILD`. To ameliorate this, we enable
        # sandboxing and block access to `/usr/local/include` in the sandbox.
        # The downside of this solution is that it "effectively disables any
        # cache the tool may have." When/if we want to use caching in our
        # automated macOS build, we must find a better solution.
        # See: https://bazel.build/docs/sandboxing
        run: |
          echo "${{ inputs.pace }}" > ./pkg/vere/PACE
          params=()
          if [[ "${{ matrix.target }}" == "macos"* ]]; then
            sudo xcode-select --switch /Library/Developer/CommandLineTools
            brew install automake libtool
            params+=(
              --clang_version=14.0.0
              --sandbox_block_path=/usr/local/include
              --spawn_strategy=sandboxed
            )
          fi
          if [[ "${{ matrix.target }}" == "linux-arm64" ]]; then
            bazel run //bazel/toolchain:aarch64-linux-musl-gcc
            params+=(
              --platforms=//:linux-arm64
            )
          fi
          if [[ "${{ matrix.target }}" == "linux-x86_64" ]]; then
            bazel run //bazel/toolchain:x86_64-linux-musl-gcc
          fi
          bazel build :urbit "${params[@]}"
          echo "$GITHUB_WORKSPACE/bazel-bin/pkg/vere/urbit"
          echo "urbit_static=$GITHUB_WORKSPACE/bazel-bin/pkg/vere/urbit" >> $GITHUB_ENV

      - name: run tests
        # TODO: Remove this condition once https://github.com/urbit/vere/issues/15 is resolved.
        if: matrix.target != 'linux-arm64'
        run: |
          params=()
          if [[ "${{ matrix.target }}" == "macos"* ]]; then
            sudo xcode-select --switch /Library/Developer/CommandLineTools
            brew install automake libtool
            params+=(
              --clang_version=14.0.0
              --sandbox_block_path=/usr/local/include
              --spawn_strategy=sandboxed
            )
          fi
          if [[ "${{ matrix.target }}" == "linux-arm64" ]]; then
            bazel run //bazel/toolchain:aarch64-linux-musl-gcc
          fi
          if [[ "${{ matrix.target }}" == "linux-x86_64" ]]; then
            bazel run //bazel/toolchain:x86_64-linux-musl-gcc
          fi
          bazel test //pkg/... "${params[@]}"

      - name: upload binary to bootstrap.urbit.org
        if: inputs.upload
        run: |
          version="$(cat ./pkg/vere/VERSION)"
          os=$(echo "${{ matrix.target }}" | cut -d'-' -f1)
          arch=$(echo "${{ matrix.target }}" | cut -d'-' -f2)
          system=${arch}-${os}
          target="gs://${UPLOAD_BASE}/${VERE_PACE}/${version}/vere-v${version}-${system}"

          gsutil cp -n "${{ env.urbit_static }}/bin/urbit" "$target"
          exitcode=$?

          test $exitcode -eq 0 &&
            echo "upload to $target complete." ||
            echo "upload to $target failed.";
          exit $exitcode

      - uses: docker/docker-login-action@v1.8.0
        if: inputs.upload
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: christian-korneck/update-container-description-action@v1
        if: inputs.upload
        env:
          DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASS: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          destination_container_repo: ${{ secrets.DOCKERHUB_USERNAME }}/urbit
          provider: dockerhub
          short_description: 'Urbit: a clean-slate OS and network for the 21st century'
          readme_file: 'DOCKER.md'

      - name: build and push docker image
        if: inputs.upload
        run: |
          version="$(cat ./pkg/vere/VERSION)"
          bazel run //pkg/vere:push_urbit_image --image_tag=v$version
          bazel run //pkg/vere:push_urbit_image --image_tag=latest
